@startuml
'https://plantuml.com/class-diagram

class Character{
    MovementStrategy movementStrategy;
    Pair<Integer,Integer> position;
    boolean checkPositionPresence(int row, int col);
    boolean changeOfPosition(int row, int col);
}
Character *-- MovementStrategy

class CharactersFactory{
    Character makeKnight(Pair<Integer, Integer> position);
    Character makePawn(Pair<Integer, Integer> position);
}
Character <-- CharactersFactory : Makes <

interface CheckPositionPresence{
    Boolean checkPositionPresence(int row, int col);
}
CheckPositionPresence <|.. Character

class Knight{
    boolean movementChecker(Pair<Integer, Integer> currentPosition, Pair<Integer, Integer> newPosition);
}

class Pawn{
        boolean movementChecker(Pair<Integer, Integer> currentPosition, Pair<Integer, Integer> newPosition);
}

interface MovementStrategy{
        boolean movementChecker(Pair<Integer, Integer> currentPosition, Pair<Integer, Integer> newPosition);
}
MovementStrategy <|.. Knight
MovementStrategy <|..Pawn

class GUI{
    final long serialVersionUID = -6218820567019985015L;
    Map<JButton,Pair<Integer,Integer>> buttons = new HashMap<>();
    Logics logics;
    int SIZE = 5;
    void draw();
}
GUI *-- Logics

interface Logics{
    boolean hit(int row, int col);
    boolean hasKnight(int row, int col);
    boolean hasPawn(int row, int col);
}
Logics <|.. LogicsImpl

class LogicsImpl{
    Character pawn;
    Character knight;
    int size;
    Pair<Integer,Integer> getPosition(Pair<Integer, Integer> coordinate);
    boolean hit(int row, int col);
    boolean hasCharacter(Pair<Integer, Integer> coordinate);
    boolean hasKnight(int row, int col);
    boolean hasPawn(int row, int col);
}
LogicsImpl *-- Character
LogicsImpl o-- CharactersFactory

@enduml